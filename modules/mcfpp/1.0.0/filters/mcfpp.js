filter();function main(){let t=api.std.node,e=`${context.config.outPath}/BP/mcfppfunctions`;function n(e,i){if("object"!=typeof i)throw`mcfpp_ERR: In ${e}: Return value must be an object or an array.`;if(Array.isArray(i)){for(let o of i){if(!o.path)throw`mcfpp_ERR: In ${e}: If the file defines multiple functions, all functions must have the \`path\` value defined.`;n(e,o)}return}let f=t.path.join(context.config.outPath,"BP/functions",i.path||e.slice(18,-3));for(let s of i.sets){let c="";i.function(s,t=>c+=t+"\n"),t.fs.mkdirSync(f,{recursive:!0}),t.fsPromises.writeFile(t.path.join(f,`${s}.mcfunction`),c)}}for(let i of api.std.glob.sync(`${e}/**/*.js`))n(i.split(context.config.outPath+"/").slice(1).join(context.config.outPath+"/"),Function(t.fs.readFileSync(i,"utf8"))());t.fsPromises.rm(e,{recursive:!0})}